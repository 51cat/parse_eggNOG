dplyr::group_by(Gene, Description) |>
dplyr::summarise(GO=stringr::str_split(GO, ",")) |>
tidyr::unnest(GO)  |>
dplyr::left_join(go.info, by = "GO")  |>
dplyr::select(Gene, GO, level, Description)  |>
dplyr::ungroup()
TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
TERM2NAME.df <- go.info[, c("GO", "name")]
return(
list(
TERM2GENE.CC = TERM2GENE.df |> dplyr:: filter(level == 'cellular_component'),
TERM2GENE.BP = TERM2GENE.df |> dplyr:: filter(level == 'biological_process'),
TERM2GENE.MF = TERM2GENE.df |> dplyr:: filter(level == 'molecular_function'),
TERM2GENE.ALL = TERM2GENE.df,
TERM2NAME = TERM2NAME.df
)
)
}
res <- parse.eggNOG.GO(eggNOG.file = "../test_data/egg.tsv", "../test_data/go-basic.obo")
res1 <- res$TERM2GENE.CC
res1
res2 <- res$TERM2NAME
res1
parse.eggNOG.GO <- function(eggNOG.file, go.obo.file) {
go.list <- obolite::read.obo(go.obo.file)
eggno <- readr::read_delim(file = eggNOG.file,
col_names = T, delim = "\t", comment = "##")
go.info <- go.list$info[,c("id", "name", "level")]
colnames(go.info) <- c("GO", "name", "level")
# parse egoNOG
anno.GO <- eggno |>
#select( `#query`, GOs, Description ) %>%
dplyr::rename(Gene = `#query`, GO = GOs)  |>
dplyr::filter(GO != "-") |>
dplyr::group_by(Gene, Description) |>
dplyr::summarise(GO=stringr::str_split(GO, ",")) |>
tidyr::unnest(GO)  |>
dplyr::left_join(go.info, by = "GO")  |>
dplyr::select(Gene, GO, level, Description)  |>
dplyr::ungroup()
TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
TERM2NAME.df <- go.info[, c("GO", "name")]
return(
list(
TERM2GENE.CC = TERM2GENE.df |> get.level.df(level == 'cellular_component'),
TERM2GENE.BP = TERM2GENE.df |> get.level.df(level == 'biological_process'),
TERM2GENE.MF = TERM2GENE.df |> get.level.df(level == 'molecular_function'),
TERM2GENE.ALL = TERM2GENE.df |> get.level.df(level = NULL),
TERM2NAME = TERM2NAME.df
)
)
}
res <- parse.eggNOG.GO(eggNOG.file = "../test_data/egg.tsv", "../test_data/go-basic.obo")
get.level.df <- function(df, level =NULL) {
if (!is.null(level)) {
df |>
dplyr:: filter(level == level) |>
dplyr::select(GO, Gene)
}else{
df |>
dplyr::select(GO, Gene)
}
}
parse.eggNOG.GO <- function(eggNOG.file, go.obo.file) {
go.list <- obolite::read.obo(go.obo.file)
eggno <- readr::read_delim(file = eggNOG.file,
col_names = T, delim = "\t", comment = "##")
go.info <- go.list$info[,c("id", "name", "level")]
colnames(go.info) <- c("GO", "name", "level")
# parse egoNOG
anno.GO <- eggno |>
#select( `#query`, GOs, Description ) %>%
dplyr::rename(Gene = `#query`, GO = GOs)  |>
dplyr::filter(GO != "-") |>
dplyr::group_by(Gene, Description) |>
dplyr::summarise(GO=stringr::str_split(GO, ",")) |>
tidyr::unnest(GO)  |>
dplyr::left_join(go.info, by = "GO")  |>
dplyr::select(Gene, GO, level, Description)  |>
dplyr::ungroup()
TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
TERM2NAME.df <- go.info[, c("GO", "name")]
return(
list(
TERM2GENE.CC = TERM2GENE.df |> get.level.df(level == 'cellular_component'),
TERM2GENE.BP = TERM2GENE.df |> get.level.df(level == 'biological_process'),
TERM2GENE.MF = TERM2GENE.df |> get.level.df(level == 'molecular_function'),
TERM2GENE.ALL = TERM2GENE.df |> get.level.df(level = NULL),
TERM2NAME = TERM2NAME.df
)
)
}
gene.list <- sample()
res <- parse.eggNOG.GO(eggNOG.file = "../test_data/egg.tsv", "../test_data/go-basic.obo")
parse.eggNOG.GO <- function(eggNOG.file, go.obo.file) {
go.list <- obolite::read.obo(go.obo.file)
eggno <- readr::read_delim(file = eggNOG.file,
col_names = T, delim = "\t", comment = "##")
go.info <- go.list$info[,c("id", "name", "level")]
colnames(go.info) <- c("GO", "name", "level")
# parse egoNOG
anno.GO <- eggno |>
#select( `#query`, GOs, Description ) %>%
dplyr::rename(Gene = `#query`, GO = GOs)  |>
dplyr::filter(GO != "-") |>
dplyr::group_by(Gene, Description) |>
dplyr::summarise(GO=stringr::str_split(GO, ",")) |>
tidyr::unnest(GO)  |>
dplyr::left_join(go.info, by = "GO")  |>
dplyr::select(Gene, GO, level, Description)  |>
dplyr::ungroup()
TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
TERM2NAME.df <- go.info[, c("GO", "name")]
return(
list(
TERM2GENE.CC = TERM2GENE.df |> get.level.df(level = 'cellular_component'),
TERM2GENE.BP = TERM2GENE.df |> get.level.df(level = 'biological_process'),
TERM2GENE.MF = TERM2GENE.df |> get.level.df(level = 'molecular_function'),
TERM2GENE.ALL = TERM2GENE.df |> get.level.df(level = NULL),
TERM2NAME = TERM2NAME.df
)
)
}
gene.list <- sample()
res <- parse.eggNOG.GO(eggNOG.file = "../test_data/egg.tsv", "../test_data/go-basic.obo")
res1 <- res$TERM2GENE.CC
res1
res2
View(res2)
res1 <- res$TERM2GENE.BP
res2 <- res$TERM2NAME
?sample
parse.eggNOG.GO <- function(eggNOG.file, go.obo.file) {
go.list <- obolite::read.obo(go.obo.file)
eggno <- readr::read_delim(file = eggNOG.file,
col_names = T, delim = "\t", comment = "##")
go.info <- go.list$info[,c("id", "name", "level")]
colnames(go.info) <- c("GO", "name", "level")
# parse egoNOG
anno.GO <- eggno |>
#select( `#query`, GOs, Description ) %>%
dplyr::rename(Gene = `#query`, GO = GOs)  |>
dplyr::filter(GO != "-") |>
dplyr::group_by(Gene, Description) |>
dplyr::summarise(GO=stringr::str_split(GO, ",")) |>
tidyr::unnest(GO)  |>
dplyr::left_join(go.info, by = "GO")  |>
dplyr::select(Gene, GO, level, Description)  |>
dplyr::ungroup()
TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
TERM2NAME.df <- go.info[, c("GO", "name")]
return(
list(
TERM2GENE.CC = TERM2GENE.df |> get.level.df(level = 'cellular_component'),
TERM2GENE.BP = TERM2GENE.df |> get.level.df(level = 'biological_process'),
TERM2GENE.MF = TERM2GENE.df |> get.level.df(level = 'molecular_function'),
TERM2GENE.ALL = TERM2GENE.df |> get.level.df(level = NULL),
TERM2NAME = TERM2NAME.df,
# test
test.genes = sample(anno.GO$Gene, 200) |> unique()
)
)
}
res <- parse.eggNOG.GO(eggNOG.file = "../test_data/egg.tsv", "../test_data/go-basic.obo")
res$test.genes
enricher(res$test.genes,
TERM2GENE = res$TERM2GENE.ALL,
TERM2NAME = res$TERM2NAME,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
clusterProfiler::enricher(res$test.genes,
TERM2GENE = res$TERM2GENE.ALL,
TERM2NAME = res$TERM2NAME,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
enrich.res <- clusterProfiler::enricher(res$test.genes,
TERM2GENE = res$TERM2GENE.ALL,
TERM2NAME = res$TERM2NAME,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
enrich.res
barplot(enrich.res)
dotchart(enrich.res)
enrichplot::dotplot(enrich.res)
download.file("https://purl.obolibrary.org/obo/go/go-basic.obo")
download.file("https://purl.obolibrary.org/obo/go/go-basic.obo", "./_go-basic.obo")
?clusterProfiler::enricher
goterms = AnnotationDbi::Ontology(GO.db::GOTERM)
goterms
termname = AnnotationDbi::Term(GO.db::GOTERM)
termname
go.db_info = GO.db::GO_dbInfo()
go.db_info
head(goterms)
head(goterms)
head(termname)
as.data.frame(termname)
AnnotationDbi::Ontology(GO.db::GOTERM)
data.frame(AnnotationDbi::Ontology(GO.db::GOTERM))
data.frame(AnnotationDbi::Term(GO.db::GOTERM))
head(data.frame(AnnotationDbi::Term(GO.db::GOTERM)))
get.go.info <- function(){
goterms  <-  AnnotationDbi::Ontology(GO.db::GOTERM)
termname  <-  AnnotationDbi::Term(GO.db::GOTERM)
df.terms <- data.frame(goterms)
colnames(df.terms) <- "level"
}
get.go.info <- function(){
goterms  <-  AnnotationDbi::Ontology(GO.db::GOTERM)
termname  <-  AnnotationDbi::Term(GO.db::GOTERM)
df.terms <- data.frame(goterms)
colnames(df.terms) <- "level"
df.terms
}
get.go.info
get.go.info()
get.go.info <- function(){
goterms  <-  AnnotationDbi::Ontology(GO.db::GOTERM)
termname  <-  AnnotationDbi::Term(GO.db::GOTERM)
df.terms <- data.frame(goterms)
colnames(df.terms) <- "level"
df.terms["name"] <- termname[rownames(df.terms)]
df.terms
}
get.go.info()
s <- get.go.info()
View(s)
res$TERM2GENE.ALL
res$TERM2NAME
m <- res$TERM2NAME
View(res)
View(m)
View(m)
View(s)
res$TERM2NAME |> dplyr::filter(GO == 'GO:0000003')
s <- get.go.info()
View(s)
View(s)
get.go.info <- function(){
goterms  <-  AnnotationDbi::Ontology(GO.db::GOTERM)
termname  <-  AnnotationDbi::Term(GO.db::GOTERM)
df.terms <- data.frame(GO = names(goterms), goterms)
colnames(df.terms) <- "level"
df.terms["name"] <- termname[rownames(df.terms)]
df.terms
}
s <- get.go.info()
View(s)
View(s)
View(s)
get.go.info <- function(){
goterms  <-  AnnotationDbi::Ontology(GO.db::GOTERM)
termname  <-  AnnotationDbi::Term(GO.db::GOTERM)
df.terms <- data.frame(GO = names(goterms), goterms)
colnames(df.terms) <- c("GO", "level")
df.terms["name"] <- termname[rownames(df.terms)]
df.terms
}
s <- get.go.info()
View(s)
get.go.info <- function(){
goterms  <-  AnnotationDbi::Ontology(GO.db::GOTERM)
termname  <-  AnnotationDbi::Term(GO.db::GOTERM)
df.terms <- data.frame(GO = names(goterms),
name = termname[names(goterms)]
goterms)
s <- get.go.info()
View(s)
df.terms <- data.frame(GO = names(goterms),
goterms,
name = termname[names(goterms)]
)
get.go.info <- function(){
goterms  <-  AnnotationDbi::Ontology(GO.db::GOTERM)
termname  <-  AnnotationDbi::Term(GO.db::GOTERM)
df.terms <- data.frame(GO = names(goterms),
goterms,
name = termname[names(goterms)]
)
#colnames(df.terms) <- c("GO", "level")
#df.terms["name"] <-
df.terms
}
s <- get.go.info()
View(s)
get.go.info <- function(){
goterms  <-  AnnotationDbi::Ontology(GO.db::GOTERM)
termname  <-  AnnotationDbi::Term(GO.db::GOTERM)
df.terms <- data.frame(GO = names(goterms),
level = goterms,
name = termname[names(goterms)]
)
#colnames(df.terms) <- c("GO", "level")
#df.terms["name"] <-
df.terms
}
s <- get.go.info()
View(s)
get.go.info <- function(){
goterms  <-  AnnotationDbi::Ontology(GO.db::GOTERM)
termname  <-  AnnotationDbi::Term(GO.db::GOTERM)
df.terms <- data.frame(GO = names(goterms),
level = goterms,
name = termname[names(goterms)]
)
return(df.terms)
}
parse.eggNOG.GO <- function(eggNOG.file, go.obo.file) {
#go.list <- obolite::read.obo(go.obo.file)
#eggno <- readr::read_delim(file = eggNOG.file,
#                    col_names = T, delim = "\t", comment = "##")
#go.info <- go.list$info[,c("id", "name", "level")]
#colnames(go.info) <- c("GO", "name", "level")
# parse egoNOG
go.info <- get.go.info()
anno.GO <- eggno |>
#select( `#query`, GOs, Description ) %>%
dplyr::rename(Gene = `#query`, GO = GOs)  |>
dplyr::filter(GO != "-") |>
dplyr::group_by(Gene, Description) |>
dplyr::summarise(GO=stringr::str_split(GO, ",")) |>
tidyr::unnest(GO)  |>
dplyr::left_join(go.info, by = "GO")  |>
dplyr::select(Gene, GO, level, Description)  |>
dplyr::ungroup()
TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
TERM2NAME.df <- go.info[, c("GO", "name")]
return(
list(
TERM2GENE.CC = TERM2GENE.df |> get.level.df(level = 'cellular_component'),
TERM2GENE.BP = TERM2GENE.df |> get.level.df(level = 'biological_process'),
TERM2GENE.MF = TERM2GENE.df |> get.level.df(level = 'molecular_function'),
TERM2GENE.ALL = TERM2GENE.df |> get.level.df(level = NULL),
TERM2NAME = TERM2NAME.df,
# test gene-list
test.genes = sample(anno.GO$Gene, 200) |> unique()
)
)
}
res <- parse.eggNOG.GO(eggNOG.file = "../test_data/egg.tsv", "../test_data/go-basic.obo")
parse.eggNOG.GO <- function(eggNOG.file, go.obo.file) {
#go.list <- obolite::read.obo(go.obo.file)
eggno <- readr::read_delim(file = eggNOG.file,
col_names = T, delim = "\t", comment = "##")
#go.info <- go.list$info[,c("id", "name", "level")]
#colnames(go.info) <- c("GO", "name", "level")
# parse egoNOG
go.info <- get.go.info()
anno.GO <- eggno |>
#select( `#query`, GOs, Description ) %>%
dplyr::rename(Gene = `#query`, GO = GOs)  |>
dplyr::filter(GO != "-") |>
dplyr::group_by(Gene, Description) |>
dplyr::summarise(GO=stringr::str_split(GO, ",")) |>
tidyr::unnest(GO)  |>
dplyr::left_join(go.info, by = "GO")  |>
dplyr::select(Gene, GO, level, Description)  |>
dplyr::ungroup()
TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
TERM2NAME.df <- go.info[, c("GO", "name")]
return(
list(
TERM2GENE.CC = TERM2GENE.df |> get.level.df(level = 'cellular_component'),
TERM2GENE.BP = TERM2GENE.df |> get.level.df(level = 'biological_process'),
TERM2GENE.MF = TERM2GENE.df |> get.level.df(level = 'molecular_function'),
TERM2GENE.ALL = TERM2GENE.df |> get.level.df(level = NULL),
TERM2NAME = TERM2NAME.df,
# test gene-list
test.genes = sample(anno.GO$Gene, 200) |> unique()
)
)
}
res <- parse.eggNOG.GO(eggNOG.file = "../test_data/egg.tsv", "../test_data/go-basic.obo")
res1 <- res$TERM2GENE.BP
res2 <- res$TERM2NAME
enrich.res <- clusterProfiler::enricher(
res$test.genes,
TERM2GENE = res$TERM2GENE.ALL,
TERM2NAME = res$TERM2NAME,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
enrichplot::dotplot(enrich.res)
parse.eggNOG.GO <- function(eggNOG.file) {
eggno <- readr::read_delim(file = eggNOG.file,
col_names = T, delim = "\t", comment = "##")
# parse egoNOG
go.info <- get.go.info()
anno.GO <- eggno |>
#select( `#query`, GOs, Description ) %>%
dplyr::rename(Gene = `#query`, GO = GOs)  |>
dplyr::filter(GO != "-") |>
dplyr::group_by(Gene, Description) |>
dplyr::summarise(GO=stringr::str_split(GO, ",")) |>
tidyr::unnest(GO)  |>
dplyr::left_join(go.info, by = "GO")  |>
dplyr::select(Gene, GO, level, Description)  |>
dplyr::ungroup()
TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
TERM2NAME.df <- go.info[, c("GO", "name")]
return(
list(
TERM2GENE.CC = TERM2GENE.df |> get.level.df(level = 'CC'),
TERM2GENE.BP = TERM2GENE.df |> get.level.df(level = 'BP'),
TERM2GENE.MF = TERM2GENE.df |> get.level.df(level = 'MF'),
TERM2GENE.ALL = TERM2GENE.df |> get.level.df(level = NULL),
TERM2NAME = TERM2NAME.df,
# test gene-list
test.genes = sample(anno.GO$Gene, 200) |> unique()
)
)
}
res <- parse.eggNOG.GO(eggNOG.file = "../test_data/egg.tsv")
res1 <- res$TERM2GENE.BP
res1
res2 <- res$TERM2NAME
enrich.res <- clusterProfiler::enricher(
res$test.genes,
TERM2GENE = res$TERM2GENE.ALL,
TERM2NAME = res$TERM2NAME,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
enrichplot::dotplot(enrich.res)
parse.eggNOG.GO <- function(eggNOG.file) {
eggno <- readr::read_delim(file = eggNOG.file,
col_names = T, delim = "\t", comment = "##")
# parse egoNOG
go.info <- get.go.info()
anno.GO <- eggno |>
#select( `#query`, GOs, Description ) %>%
dplyr::rename(Gene = `#query`, GO = GOs)  |>
dplyr::filter(GO != "-") |>
dplyr::group_by(Gene, Description) |>
dplyr::summarise(GO=stringr::str_split(GO, ",")) |>
tidyr::unnest(GO)  |>
dplyr::left_join(go.info, by = "GO")  |>
dplyr::select(Gene, GO, level, Description)  |>
dplyr::ungroup()
TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
TERM2NAME.df <- go.info[, c("GO", "name")]
return(
list(
TERM2GENE.CC = TERM2GENE.df |> get.level.df(level = 'CC'),
TERM2GENE.BP = TERM2GENE.df |> get.level.df(level = 'BP'),
TERM2GENE.MF = TERM2GENE.df |> get.level.df(level = 'MF'),
TERM2GENE.ALL = TERM2GENE.df |> get.level.df(level = NULL),
TERM2NAME = TERM2NAME.df,
# test gene-list
test.genes = sample(anno.GO$Gene, 200) |> unique()
)
)
}
res <- parse.eggNOG.GO(eggNOG.file = "../test_data/egg.tsv")
res1 <- res$TERM2GENE.BP
res2 <- res$TERM2NAME
enrich.res <- clusterProfiler::enricher(
res$test.genes,
TERM2GENE = res$TERM2GENE.ALL,
TERM2NAME = res$TERM2NAME,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
enrichplot::dotplot(enrich.res)
go.list <- obolite::read.obo("../test_data/go-basic.obo")
parse.eggNOG.GO <- function(eggNOG.file) {
eggno <- readr::read_delim(file = eggNOG.file,
col_names = T, delim = "\t", comment = "##")
# parse egoNOG
go.info <- get.go.info()
anno.GO <- eggno |>
#select( `#query`, GOs, Description ) %>%
dplyr::rename(Gene = `#query`, GO = GOs)  |>
dplyr::filter(GO != "-") |>
dplyr::group_by(Gene, Description) |>
dplyr::summarise(GO=stringr::str_split(GO, ",")) |>
tidyr::unnest(GO)  |>
dplyr::left_join(go.info, by = "GO")  |>
dplyr::select(Gene, GO, level, Description)  |>
dplyr::ungroup()
TERM2GENE.df <- anno.GO[, c("GO", "Gene" ,"level")] |> tidyr::drop_na()
TERM2NAME.df <- go.info[, c("GO", "name")]
return(
list(
TERM2GENE.CC = TERM2GENE.df |> get.level.df(level = 'CC'),
TERM2GENE.BP = TERM2GENE.df |> get.level.df(level = 'BP'),
TERM2GENE.MF = TERM2GENE.df |> get.level.df(level = 'MF'),
TERM2GENE.ALL = TERM2GENE.df |> get.level.df(level = NULL),
TERM2NAME = TERM2NAME.df,
# test gene-list
test.genes = sample(anno.GO$Gene, 200) |> unique()
)
)
}
res <- parse.eggNOG.GO(eggNOG.file = "../test_data/egg.tsv")
enrich.res <- clusterProfiler::enricher(
res$test.genes,
TERM2GENE = res$TERM2GENE.ALL,
TERM2NAME = res$TERM2NAME,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
enrich.res <- clusterProfiler::enricher(
res$test.genes,
TERM2GENE = res$TERM2GENE.ALL,
TERM2NAME = res$TERM2NAME,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
enrichplot::dotplot(enrich.res)
enrich.res <- clusterProfiler::enricher(
res$test.genes,
TERM2GENE = res$TERM2GENE.CC,
TERM2NAME = res$TERM2NAME,
pvalueCutoff = 0.05,
qvalueCutoff = 0.05)
enrichplot::dotplot(enrich.res)
